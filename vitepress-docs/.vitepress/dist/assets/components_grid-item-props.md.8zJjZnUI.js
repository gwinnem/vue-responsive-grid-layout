import{_ as o,o as t,c as d,a as i,k as e,R as l}from"./chunks/framework.j-cahziU.js";const x=JSON.parse('{"title":"GridItem Properties","description":"","frontmatter":{},"headers":[],"relativePath":"components/grid-item-props.md","filePath":"components/grid-item-props.md","lastUpdated":1703794519000}'),r={name:"components/grid-item-props.md"},a=e("h1",{id:"griditem-properties",tabindex:"-1"},"GridItem Properties",-1),c=e("h2",{id:"distributeevenly",tabindex:"-1"},"distributeEvenly",-1),n=e("ul",null,[e("li",null,[i("default: "),e("code",null,"true")]),e("li",null,[i("required: "),e("code",null,"false")]),e("li",null,[i("type: "),e("code",null,"Boolean")])],-1),s=e("br",null,null,-1),h=l('<h3 id="with-normal-layout" tabindex="-1">With normal layout:</h3><p>This means that a grid item will be moved to the left until it finds that a grid item already is to the left.</p><h4 id="with-mirrored-rtl-layout" tabindex="-1">With mirrored (rtl) layout:</h4><p><strong>WIP</strong></p><h2 id="enableeditmode" tabindex="-1">enableEditMode</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code><br> When set to <code>false</code>, it overrides the props: <code>isDraggable</code>, <code>isResizable</code> and <code>showCloseButton</code>. <br> Setting it to true will not change these props, but will not override them.</li></ul><h2 id="isbounded" tabindex="-1">isBounded</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the item is bounded to the container when dragging.</p><p>If default value is <code>null</code> then it&#39;s inherited from parent.</p><h2 id="dragallowfrom" tabindex="-1">dragAllowFrom</h2><ul><li>default: <code>null</code></li><li>required: <code>false</code></li><li>type: <code>String</code></li></ul><p>Says which elements of the item should trigger drag event of the item.</p><p>The value is <code>css-like</code> selector string.</p><p>If <code>null</code> then one can drag by any (excluding <code>dragIgnoreFrom</code>) element of the item.</p><p>For more info please refer to <code>allowFrom</code> in <a href="http://interactjs.io/docs/#ignorable-selectors" target="_blank" rel="noreferrer">interact.js docs</a>.</p><h2 id="dragignorefrom" tabindex="-1">dragIgnoreFrom</h2><ul><li>default: <code>&#39;a, button&#39;</code></li><li>required: <code>false</code></li><li>type: <code>String</code></li></ul><p>Says which elements of the item shouldn&#39;t trigger drag event of the item.</p><p>The value is <code>css-like</code> selector string.</p><p>For more info please refer to <code>ignoreFrom</code> in <a href="http://interactjs.io/docs/#ignorable-selectors" target="_blank" rel="noreferrer">interact.js docs</a>.</p><h2 id="dragoption" tabindex="-1">dragOption</h2><ul><li>default: <code>{}</code></li><li>required: <code>false</code></li><li>type: <code>Object</code></li></ul><p>Pass through object for the grid item <a href="https://interactjs.io/docs/draggable/" target="_blank" rel="noreferrer">interact.js draggable configuration</a></p><h2 id="h" tabindex="-1">h</h2><ul><li>type: <code>Number</code></li><li>required: <code>true</code></li></ul><p>Says what is the initial height of the item.</p><p>The value is a number that is multiplied by <code>rowHeight</code>.</p><h2 id="i" tabindex="-1">i</h2><ul><li>required: <code>true</code></li><li>type: <code>String | Number</code></li></ul><p>This is the unique identifier of the item.</p><h2 id="isbounded-1" tabindex="-1">isBounded</h2><ul><li>default: <code>null</code></li><li>required: <code>false</code></li><li>type: <code>Boolean | null</code></li></ul><p>Says if the item is bounded to the container when dragging.</p><p>If default value is <code>null</code> then it&#39;s inherited from parent.</p><h2 id="isdraggable" tabindex="-1">isDraggable</h2><ul><li>default: <code>null</code></li><li>required: <code>false</code></li><li>type: <code>Boolean | null</code></li></ul><p>Says if item is draggable.</p><p>If default value is <code>null</code> then it&#39;s inherited from parent.</p><h2 id="isresizable" tabindex="-1">isResizable</h2><ul><li>default: <code>null</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if item is resizable.</p><p>If default value is <code>null</code> then it&#39;s inherited from parent.</p><h2 id="isstatic" tabindex="-1">isStatic</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if item is static (won&#39;t be draggable, resizable or moved by other items).</p><h2 id="maxh" tabindex="-1">maxH</h2><ul><li>default: <code>Infinity</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Says what is a maximal height of the item. If <code>h</code> will be bigger then <code>maxH</code> then <code>h</code> will be set to <code>maxH</code>.</p><p>The value is a number that is multiplied by <code>rowHeight</code></p><h2 id="maxw" tabindex="-1">maxW</h2><ul><li>default: <code>Infinity</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Says what is a maximal width of the item. If <code>w</code> will be bigger then <code>maxW</code> then <code>w</code> will be set to <code>maxW</code>.</p><p>The value is a number that is multiplied by <code>colWidth</code>.</p><h2 id="minh" tabindex="-1">minH</h2><ul><li>default: <code>1</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Says what is a minimal height of the item. If <code>h</code> will be smaller then <code>minH</code> then <code>h</code> will be set to <code>minH</code>.</p><p>The value is a number that is multiplied by <code>rowHeight</code>.</p><h2 id="minw" tabindex="-1">minW</h2><ul><li>default: <code>1</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Says what is a minimal width of the item. If <code>w</code> will be smaller then <code>minW</code> then <code>w</code> will be set to <code>minW</code>.</p><p>The value is a number that is multiplied by <code>colWidth</code>.</p><h2 id="preserveaspectratio" tabindex="-1">preserveAspectRatio</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If &#39;true&#39;, forces the GridItem to preserve its aspect ratio when resizing.</p><h2 id="resizeignorefrom" tabindex="-1">resizeIgnoreFrom</h2><ul><li>default: <code>&#39;a, button&#39;</code></li><li>required: <code>false</code></li><li>type: <code>String</code></li></ul><p>Says which elements of the item shouldn&#39;t trigger resize event of the item.</p><p>The value is <code>css-like</code> selector string.</p><p>For more info please refer to <code>ignoreFrom</code> in <a href="http://interactjs.io/docs/#ignorable-selectors" target="_blank" rel="noreferrer">interact.js docs</a>.</p><h2 id="resizeoption" tabindex="-1">resizeOption</h2><ul><li>default: <code>{}</code></li><li>required: <code>false</code></li><li>type: <code>Object</code></li></ul><p>Pass through object for the grid item <a href="https://interactjs.io/docs/resizable/" target="_blank" rel="noreferrer">interact.js resizable configuration</a></p><h2 id="showclosebutton" tabindex="-1">showCloseButton</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If <code>true</code>, the GridItem will show a close button in the top right corner.</p><p>When it is being clicked it will fire an event <code>remove-grid-item</code> which the <code>GridLayout</code> is listening for. The <code>GridItem</code> will then be removed from the <code>GridLayout</code>.</p><h2 id="useborderradius" tabindex="-1">useBorderRadius</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If set to true, it adds a 8px corner radius to the GridItem.</p><h2 id="w" tabindex="-1">w</h2><ul><li>required: <code>true</code></li><li>type: <code>Number</code></li></ul><p>Says what is the initial width of the item.</p><p>The value is a number that is multiplied by <code>colWidth</code>.</p><h2 id="x" tabindex="-1">x</h2><ul><li>required: <code>true</code></li><li>type: <code>Number</code></li></ul><p>Says what is the initial horizontal position of the item (in which column it should be placed).</p><p>The value must be a <em>whole number</em>.</p><h2 id="y" tabindex="-1">y</h2><ul><li>required: <code>true</code></li><li>type: <code>Number</code></li></ul><p>Says what is the initial vertical position of the item (in which row it should be placed).</p><p>The value must be a <em>whole number</em>.</p>',92);function u(p,m,f,b,g,y){return t(),d("div",null,[a,c,n,s,i(" When true it will ensure that when the layout is resized, the grid item's are evenly distributed. "),h])}const _=o(r,[["render",u]]);export{x as __pageData,_ as default};
