import{_ as e,o,c as i,R as d}from"./chunks/framework.j-cahziU.js";const m=JSON.parse('{"title":"GridLayout Properties","description":"","frontmatter":{},"headers":[],"relativePath":"components/grid-layout-props.md","filePath":"components/grid-layout-props.md","lastUpdated":1703794519000}'),l={name:"components/grid-layout-props.md"},t=d('<h1 id="gridlayout-properties" tabindex="-1">GridLayout Properties</h1><h2 id="autosize" tabindex="-1">autoSize</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>When <code>true</code> the <code>GridLayout</code> container is adjusting height and width based on the content.</p><h2 id="borderradiuspx-not-reactive" tabindex="-1">borderRadiusPx(Not reactive)</h2><ul><li>default: <code>8</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Set&#39;s border-radius css value used for the GridItem. <br><strong>This value is fully reactive.</strong></p><h2 id="breakpoints" tabindex="-1">breakpoints</h2><ul><li>default: <code>{ lg: 1200, md: 996, sm: 768, xs: 576, xxs: 0 }</code></li><li>required: <code>false</code></li><li>type: <code>Object</code></li></ul><p>Breakpoints defined for responsive layout, the parameter represents the width of different devices: <br><em>lg = large, md = medium, sm = small, xs = extra small.</em><br> Sets widths on wich column number changes.</p><h2 id="colnum" tabindex="-1">colNum</h2><ul><li>default: <code>12</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Says how many columns the grid has.</p><p>The value should be a <em>natural number</em>.</p><h2 id="cols" tabindex="-1">cols</h2><ul><li>default: <code>{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }</code></li><li>required: <code>false</code></li><li>type: <code>Object</code></li></ul><p>Defines number of columns for each breakpoint.</p><p>If false, <code>isDraggable</code> and <code>isResizeable</code> will be set to <code>false</code> and the <code>GridItem</code>&#39;s will be static. <br> Setting it from <code>false</code> to <code>true</code> will enable both the <code>isDraggable</code> and <code>isResizeable</code> props.</p><h2 id="distributeevenly" tabindex="-1">distributeEvenly</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If set to <code>true</code> it will ensure that GridItems are distributed evenly in the layout.</p><h2 id="horizontalshift" tabindex="-1">horizontalShift</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>When <code>true</code> the <code>GridItem</code>&#39;s will be moved horizontally when two of them collides. <br> When <code>false</code> the <code>GridItem</code>&#39;s will be moved vertically when two of them collides.</p><h2 id="isbounded" tabindex="-1">isBounded</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the grid items are bounded to the container when dragging</p><h2 id="isdraggable" tabindex="-1">isDraggable</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>When <code>true</code> the <code>GridItem</code>&#39;s can be dragged to a new position in the layout. Except if a &#39;GridItem&#39; is <code>static</code> then it will not be possible to drag it into a new position in the layout.</p><h2 id="ismirrored-not-reactive" tabindex="-1">isMirrored(Not reactive)</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the RTL/LTR should be reversed.</p><h2 id="isresizable" tabindex="-1">isResizable</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>When <code>true</code> the <code>GridItem</code>&#39;s can be resized both horizontally and vertically.</p><h2 id="layout" tabindex="-1">layout</h2><ul><li>required: <code>true</code></li><li>type: <code>TLayout[]</code></li></ul><p>This is the initial layout of the grid.</p><p>The value must be an <code>Array</code> of type <code>TLayout</code> items. Each item must have:</p><ul><li><code>h</code> The number of rows the <code>GridItem</code> will use.</li><li><code>i</code> The index of the <code>GridItem</code> in the layout array.</li><li><code>x</code> Column start position.</li><li><code>y</code> Row start position.</li><li><code>w</code> The number of columns the <code>GridItem</code> will use.</li></ul><p>Please refer to the documentation for <a href="./grid-item">GridItem</a> for more details.</p><h2 id="margin-not-reactive" tabindex="-1">margin(Not reactive)</h2><ul><li>default: <code>[10, 10]</code></li><li>required: <code>false</code></li><li>type: <code>Array</code></li></ul><p>Says what are the margins of elements inside the grid.</p><p>The value must be a two-element <code>Array</code> of <code>Number</code>. Each value is expressed in pixels. The first element is a margin horizontally, the second element is a vertical margin.</p><h2 id="maxrows" tabindex="-1">maxRows</h2><ul><li>default: <code>Infinity</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>The maximal number of rows in the <code>GridLayout</code>.</p><h2 id="preventcollision" tabindex="-1">preventCollision</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if grid items will move when being dragged over.</p><h2 id="responsive" tabindex="-1">responsive</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the layout should be responsive to window width</p><h2 id="responsivelayouts-must-be-tested" tabindex="-1">responsiveLayouts(Must be tested)</h2><ul><li>default : <code>{}</code></li><li>required: <code>false</code></li><li>type: <code>Object</code></li></ul><p>This is the initial layouts of the grid per breakpoint if <code>responsive</code> is set to <code>true</code>. The keys of the <code>Object</code> are breakpoint names and each value is an <code>Array</code> of <code>Object</code> items as defined by <code>layout</code> prop. eg:{ lg:[layout items], md:[layout items] }. Setting the prop after the creation of the GridLayout has no effect.</p><h2 id="restoreondrag-must-be-tested" tabindex="-1">restoreOnDrag(Must be tested)</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the moved grid items should be restored after an item has been dragged over.</p><h2 id="rowheight" tabindex="-1">rowHeight</h2><ul><li>default: <code>150</code></li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Says what is a height of a single row in pixels.</p><h2 id="showclosebutton" tabindex="-1">showCloseButton</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If <code>true</code>, the GridItem&#39;s will show a close button in the top right corner.</p><p>When the button is being clicked, an event <code>remove-grid-item</code> will be emitted by the <code>GridItem</code>. The <code>GridLayout</code> is listening for this event and will remove the <code>GridItem</code> will then be removed from the <code>layout</code>.</p><h2 id="showgridlines" tabindex="-1">showGridLines</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If set to true, it adds a grid layout, displaying the size of each box in the GridLayout.</p><h2 id="transformscale-must-be-tested" tabindex="-1">transformScale(Must be tested)</h2><ul><li>default: 1</li><li>required: <code>false</code></li><li>type: <code>Number</code></li></ul><p>Sets a scaling factor to the size of the grid items, 1 is 100%</p><h2 id="useborderradius" tabindex="-1">useBorderRadius</h2><ul><li>default: <code>false</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>If set to true, it adds a 8px corner radius to each GridItem.</p><h2 id="usecsstransforms" tabindex="-1">useCssTransforms</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the CSS <code>transition-property: transform;</code> should be used.</p><h2 id="verticalcompact" tabindex="-1">verticalCompact</h2><ul><li>default: <code>true</code></li><li>required: <code>false</code></li><li>type: <code>Boolean</code></li></ul><p>Says if the layout should be compacted vertically.</p>',83),a=[t];function c(r,s,u,n,h,p){return o(),i("div",null,a)}const b=e(l,[["render",c]]);export{m as __pageData,b as default};
